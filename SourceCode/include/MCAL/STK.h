/*
 ============================================================================
 Name        : STK.h
 Author      : Farah Mohey
 Description : Header file for STK (SysTick for STM32F401xC)
 Created	 : 29-Mar-24
 ============================================================================
 */

#ifndef MCAL_STK_H_
#define MCAL_STK_H_

/******************************* Includes *************************************/
#include "LIB/Std_Types.h"
#include "LIB/Masks.h"
#include "LIB/Errors_enum.h"
#include "CFG/STK_Cfg.h"

/******************************* Definitions ***********************************/

/* Available configuration modes to be applied in SetConfig function */
#define STK_AHB_8_DIS_INT 	0x00000000  /*clk source = AHB/8 & DOESN'T ASSERT the SysTick exception request --> 00*/
#define STK_AHB_8_ENB_INT 	0x00000002  /*clk source = AHB/8 & ASSERT the SysTick exception request --> 01*/

#define STK_AHB_DIS_INT   	0x00000004  /*clk source = Processor CLK --> AHB & DOESN'T ASSERT the SysTick exception request --> 10*/
#define STK_AHB_ENB_INT  	0x00000006  /*clk source = Processor CLK --> AHB & ASSERT the SysTick exception request--> 11*/

/*	 Bit 2						  Bit 1
 * 	CLKSOURCE					 TICKINT
 * 0--> AHB/8					0--> Counting down to zero DOES NOT assert the SysTick exception request
 *1--> Processor clock (AHB)	1--> Counting down to zero to asserts the SysTick exception request
 */


/***************************** Types Declaration *******************************/
/*Pointer To function , this function takes no parameters (void) and has no return void */
typedef void (*STK_CBF_t)(void);


/************************** Functions Prototypes ******************************/

/*
 * @brief   : Starts the SysTick timer.
 * @param   : None
 * @return  : enumError_t - Indicating Status of the operation if Success or Failure
 * @details : This function starts the SysTick timer to generate interrupts according to the configured time interval.
 */
enumError_t STK_Start(void);


/*
 * @brief   : Stops the SysTick timer.
 * @param   : None
 * @return  : enumError_t - Indicating Status of the operation if Success or Failure
 * @details : This function stops the SysTick timer from generating interrupts.
 */
enumError_t STK_Stop(void);

/*
 * @brief   : Sets the configuration of the SysTick timer.
 * @param   : Mode - The mode to configure the SysTick timer.
 * @param	: Mode can be --> STK_AHB_8_DIS_INT ,  STK_AHB_DIS_INT
 * 							  STK_AHB_8_ENB_INT ,  STK_AHB_ENB_INT
 * @return  : enumError_t - Indicating Status of the operation if Success or Failure
 * @details : This function configures the SysTick timer according to the provided mode.
 */
enumError_t STK_SetConfig(u32 Mode);


/*
 * @brief   : Sets the time interval for the SysTick timer.
 * @param   : TimeMs - The time interval in milliseconds.
 * @return  : enumError_t - Indicating Status of the operation if Success or Failure
 * @details : This function sets the time interval for the SysTick timer,
 * 				which determines the period between interrupts generated by the timer.
 */
enumError_t STK_SetTimeMs(u32 TimeMs);

/*
 * @brief   : Get Current Value of VAL Register - Remaining Time for SYSTICK.
 * @param   : *Curr_Val - Pointer to access register and store in it the value.
 * @return  : enumError_t - Indicating Status of the operation if Success or Failure
 */
enumError_t STK_GET_CurrentVal(u32 *Curr_Val);

/*
 * @brief   : Sets the callback function for the SysTick timer interrupt.
 * @param   : CallBack - Pointer to the callback function.
 * @return  : enumError_t - Indicating Status of the operation if Success or Failure
 * @details : This function sets the callback function to be called when the SysTick timer generates an interrupt.
 * 				The callback function will be executed each time the timer generates an interrupt.
 */
enumError_t STK_SetCallBack(STK_CBF_t CallBack);


/*
 * @brief   : SysTick interrupt handler.
 * @param   : None
 * @return  : None
 * @details : This function is the interrupt handler for the SysTick timer interrupt.
 *            It checks if a callback function (APP_CBF) is registered and calls it
 *            if it exists. This function is typically called every time the SysTick
 *            timer generates an interrupt.
 */
void SysTick_Handler(void);

#endif /* MCAL_STK_H_ */
